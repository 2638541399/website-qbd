name: build

on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - uses: actions/setup-ruby@v1
      with:
        ruby-version: 2.7
    - name: Setup cache for Bundler
      id: cache
      uses: actions/cache@v1
      with:
        path: vendor/bundle
        key: ${{ runner.os }}-bundler-2.7-${{ hashFiles('Gemfile') }}
        restore-keys: |
          ${{ runner.os }}-bundler-2.7-
    - name: Install dependencies
      run: |
        bundle install --path=vendor/bundle
        bundle clean
    - name: Prepare build
      run: |
        git clone --depth=1 --branch=gh-pages --single-branch --no-checkout \
          "https://${GITHUB_ACTOR}:${{ secrets.GITHUB_TOKEN }}@github.com/${GITHUB_REPOSITORY}.git" \
          _site
    - name: Build site
      run: |
        bundle exec jekyll build --trace --profile
        : > _site/.nojekyll
        echo -n 'beta.ustclug.org' > _site/CNAME
      env:
        JEKYLL_ENV: production
        JEKYLL_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - name: Deploy to GitHub Pages
      run: |
        CINFO="$(git log -1 --pretty="%an: [%h] %s")"
        pushd _site/ &>/dev/null
        git add -A
        git -c user.name=GitHub -c user.email=noreply@github.com commit \
          -m "Auto deploy from GitHub Actions build ${GITHUB_RUN_NUMBER}" \
          -m "$CINFO"
        git push
        popd &>/dev/null
    - name: Call webhook
      shell: ruby -e
      env:
        WEBHOOK_SECRET: ${{ secrets.WEBHOOK_SECRET }}
      run: |
        require 'openssl'
        require 'net/http'
        require 'json'

        uri = URI("https://lug.ustc.edu.cn/_webhook/github/html")
        key = ENV['WEBHOOK_SECRET'] or exit
        payload = JSON.dump({ :ref => "refs/heads/gh-pages" })

        req = Net::HTTP::Post.new uri
        req.body = payload
        req["X-Hub-Signature"] = OpenSSL::HMAC.hexdigest("SHA1", key, payload)
        req["Content-Type"] = "application/json"

        res = Net::HTTP.start(uri.hostname, uri.port, use_ssl: true, max_retries: 5) do |http|
          http.request req
        end
        puts "Status: #{res.code}"
        puts res.body
